name: Update Tagged Versions

on:
  schedule:
    - cron: '0 3 * * *' # daily at 03:00 UTC
  workflow_dispatch:

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    if: github.repository == 'LizenzFass78851/docker-fivem-fexemu'
    env:           
      GIT_USER: github-actions
      GIT_EMAIL: github-actions@github.com

    steps:
      - name: key
        id: key
        run: |
          export KEY="${GITHUB_WORKFLOW%-*}"
          echo "key=$KEY" >> $GITHUB_OUTPUT
          echo "################################################################" && bash -c "echo KEY=$KEY"

      - name: clone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git clone https://github-actions:$GITHUB_TOKEN@${GITHUB_SERVER_URL##*/}/$GITHUB_REPOSITORY.git $GITHUB_WORKSPACE --branch $GITHUB_REF_NAME --depth=1 --single-branch

      - name: update fivem
        env:
          SRV_ADR: "https://runtime.fivem.net/artifacts/fivem/build_proot_linux/master/"
        run: |
          [ "${{ github.workflow }}" != "${{ steps.key.outputs.key }}" ] && c=5 || c=1
          
          DL_URL="$(wget -qO- "$SRV_ADR" | grep -oE 'href="\./[0-9]+-[^/]+/fx\.tar\.xz"' | sed -E 's#href="\./([^"]+)".*#\1#' | sort -t- -k1,1n | tail -n1)"
          
          without_suffix=${DL_URL%/fx.tar.xz}
          version=${without_suffix%%-*}

          echo "FIVEM_NUM: $version"
          echo "FIVEM_VER: $without_suffix"

          seq $c | while read x; do \
          [ -n "$version" ]        && [[ "$version" =~ ^[0-9]+$ ]]                     && echo 'patching Dockerfile' && sed -i "s|ARG FIVEM_NUM=.*|ARG FIVEM_NUM=${version}|g"        $GITHUB_WORKSPACE/Dockerfile; \
          [ -n "$without_suffix" ] && [[ "$without_suffix" =~ ^[0-9]+-[0-9a-f]{40}$ ]] && echo 'patching Dockerfile' && sed -i "s|ARG FIVEM_VER=.*|ARG FIVEM_VER=${without_suffix}|g" $GITHUB_WORKSPACE/Dockerfile; \
          done

          # Commit FiveM changes if any
          git add .
          git status
          git config --local user.name ${{ env.GIT_USER }}
          git config --local user.email ${{ env.GIT_EMAIL }}
          git diff --cached --quiet && exit 0 || git commit -m "feat: Update FiveM version to ${version}"

      - name: update fex-emu
        env:
          API_URL: "https://api.github.com/repos/FEX-Emu/FEX/releases/latest"
        run: |
          [ "${{ github.workflow }}" != "${{ steps.key.outputs.key }}" ] && c=5 || c=1
          
          LATEST_TAG=$(curl -s $API_URL | jq -r .tag_name)
          
          echo "FEX_VER: $LATEST_TAG"

          seq $c | while read x; do \
          [ -n "$LATEST_TAG" ] && echo 'patching Dockerfile' && sed -i "s|ARG FEX_VER=.*|ARG FEX_VER=${LATEST_TAG}|g" $GITHUB_WORKSPACE/Dockerfile; \
          done

          # Commit FEX-EMU changes if any
          git add .
          git status
          git config --local user.name ${{ env.GIT_USER }}
          git config --local user.email ${{ env.GIT_EMAIL }}
          git diff --cached --quiet && exit 0 || git commit -m "feat: Update FEX-EMU version to ${LATEST_TAG}"

      - name: update resources
        env:
          GIT_ADR: "https://github.com/citizenfx/cfx-server-data/"
        run: |
          [ "${{ github.workflow }}" != "${{ steps.key.outputs.key }}" ] && c=5 || c=1
          
          LATEST_HASH=$(git ls-remote "${{env.GIT_ADR}}" HEAD | cut -f1)
          
          echo "DATA_VER: $LATEST_HASH"

          seq $c | while read x; do \
          [ -n "$LATEST_HASH" ] && [[ "$LATEST_HASH" =~ ^[0-9a-f]{40}$ ]] && echo 'patching Dockerfile' && sed -i "s|ARG DATA_VER=.*|ARG DATA_VER=${LATEST_HASH}|g" $GITHUB_WORKSPACE/Dockerfile; \
          done

          # Commit resources changes if any
          git add .
          git status
          git config --local user.name ${{ env.GIT_USER }}
          git config --local user.email ${{ env.GIT_EMAIL }}
          git diff --cached --quiet && exit 0 || git commit -m "feat: Update resources version to ${LATEST_HASH}"

      - name: push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local credential.helper '!x() { echo "password=$GITHUB_TOKEN"; };x'
          git push origin $GITHUB_REF_NAME

